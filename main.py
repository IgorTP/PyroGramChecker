import os
import json
from datetime import datetime
import base64
from pyrogram import Client, filters
from dotenv import load_dotenv
import pytz

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
try:
    load_dotenv()
except Exception as e:
    print(e)

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
MY_USER_ID = int(os.getenv("MY_USER_ID"))
CONTROLLER_BOT = os.getenv("CONTROLLER_BOT")

PART_COUNT = int(os.getenv("SESSION_PART_COUNT"))
SESSION_PATH = "edit_tracker.session"


# === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã ===
def restore_session_from_parts():
    if not PART_COUNT:
        print("‚ö†Ô∏è SESSION_PART_COUNT –Ω–µ –∑–∞–¥–∞–Ω")
        return False

    try:
        session_string = ''.join([
            os.getenv(f"SESSION_PART_{i}") for i in range(PART_COUNT)
        ])
        session_string += '=' * (-len(session_string) % 4)

        decoded = base64.b64decode(session_string)
        with open(SESSION_PATH, "wb") as f:
            f.write(decoded)
        print("‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")
        return False


print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é...")
success = restore_session_from_parts()

if not success or not os.path.exists(SESSION_PATH):
    print("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–∏. –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
    exit(1)

# # === –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏ –¥–æ —Å—Ç–∞—Ä—Ç–∞ ===
# if os.path.exists(SESSION_PATH):
#     print("‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞")
# else:
#     print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é...")
#     success = restore_session_from_parts()
#
#     if not success or not os.path.exists(SESSION_PATH):
#         print("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–∏. –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
#         exit(1)

original_messages = {}
ALLOWED_USERS_FILE = "allowed_users.json"

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ =====
if os.path.exists(ALLOWED_USERS_FILE):
    with open(ALLOWED_USERS_FILE, "r") as file:
        ALLOWED_USERS = set(json.load(file))
else:
    ALLOWED_USERS = set()


# ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø–∏—Å–∫–∞ =====
def save_updated_allowed_users():
    with open(ALLOWED_USERS_FILE, "w") as file:
        json.dump(list(ALLOWED_USERS), file)


def convert_to_msk(date: datetime) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ UTC –≤ MSK –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –±–µ–∑ tzinfo"""
    timezone = pytz.timezone('Europe/Moscow')
    msk_time = date.astimezone(timezone)
    return msk_time.strftime("%Y-%m-%d %H:%M:%S")


# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
app = Client("edit_tracker", api_id=API_ID, api_hash=API_HASH)

# ===== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä—è–º–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è =====
base_filters = filters.text & filters.private & filters.me & filters.chat(chats=CONTROLLER_BOT)


@app.on_message(base_filters & filters.command("adduser"))
async def adduser_handler(client, message):
    username = message.text.split(maxsplit=1)[1].strip().lstrip("@")

    ALLOWED_USERS.add(username)
    await message.reply(f"‚úÖ @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä—è–º–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    save_updated_allowed_users()


@app.on_message(base_filters & filters.command("deluser"))
async def deluser_handler(client, message):
    username = message.text.split(maxsplit=1)[1].strip().lstrip("@")
    if username in ALLOWED_USERS:
        ALLOWED_USERS.remove(username)
        await message.reply(f"‚ùå @{username} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä—è–º–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    else:
        await message.reply(f"‚ö†Ô∏è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
    save_updated_allowed_users()


@app.on_message(base_filters & filters.command("listuser"))
async def listuser_handler(client, message):
    if not ALLOWED_USERS:
        await message.reply("üìÇ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    else:
        users_list = "\n".join([f"@{us}" for us in ALLOWED_USERS])
        await message.reply(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä—è–º–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n{users_list}")


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è =====
def format_message(user, chat, original_text, new_text, date_str):
    return f"""
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name or ''}
üîó –Æ–∑–µ—Ä–Ω–µ–π–º: {f"@{user.username}" if user.username else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}
‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone_number}
üí¨ –ß–∞—Ç: {chat.title or '–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}
üìÖ –î–∞—Ç–∞: {date_str}
üì© –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ:
üîπ –î–æ: `{original_text}`
üî∏ –ü–æ—Å–ª–µ: `{new_text}`
"""


# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π =====
@app.on_message(filters.text & ~filters.me)
async def save_original(client, message):
    message_id = message.id
    original_messages[message_id] = message.text


# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π =====
@app.on_edited_message(filters.text & ~filters.me)
async def track_edit(client, message):
    message_id = message.id
    original_text = original_messages.get(message_id)
    new_text = message.text

    if not original_text or new_text == original_text:
        return

    user = message.from_user
    chat = message.chat
    date_str = convert_to_msk(message.date)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_msg = format_message(user, chat, original_text, new_text, date_str)

    if user.username in ALLOWED_USERS:
        await message.reply_text(formatted_msg, quote=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ –≤ –ª–∏—á–∫—É
    try:
        await app.send_message(chat_id=CONTROLLER_BOT, text=formatted_msg)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ]: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
    original_messages[message_id] = new_text


if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π")
    app.run()
